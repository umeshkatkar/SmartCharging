// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartCharging;

namespace SmartCharging.Entities.Migrations
{
    [DbContext(typeof(DBSmartChargingContext))]
    partial class DBSmartChargingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SmartCharging.ChargingConnector", b =>
                {
                    b.Property<int>("ConnectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectorIdentifier")
                        .IsRequired()
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<int>("MaxCurrent")
                        .HasColumnType("int");

                    b.Property<int>("StationIdentifier")
                        .HasColumnType("int");

                    b.HasKey("ConnectorId");

                    b.HasIndex("StationIdentifier");

                    b.ToTable("ChargingConnector");
                });

            modelBuilder.Entity("SmartCharging.ChargingGroup", b =>
                {
                    b.Property<int>("GroupIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CapacityInAmps")
                        .HasColumnType("int");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("GroupIdentifier");

                    b.ToTable("ChargingGroup");
                });

            modelBuilder.Entity("SmartCharging.ChargingStation", b =>
                {
                    b.Property<int>("StationIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupIdentifier")
                        .HasColumnType("int");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("StationIdentifier");

                    b.HasIndex("GroupIdentifier");

                    b.ToTable("ChargingStation");
                });

            modelBuilder.Entity("SmartCharging.ChargingConnector", b =>
                {
                    b.HasOne("SmartCharging.ChargingStation", "ChargingStation")
                        .WithMany("ChargingConnectors")
                        .HasForeignKey("StationIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartCharging.ChargingStation", b =>
                {
                    b.HasOne("SmartCharging.ChargingGroup", "ChargingGroup")
                        .WithMany("ChargingStations")
                        .HasForeignKey("GroupIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
